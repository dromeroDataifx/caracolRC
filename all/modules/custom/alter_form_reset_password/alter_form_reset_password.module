<?php
 /**
  * @file
  * 
  */

function alter_form_reset_password_menu_alter(&$items) {
 
   
    $items['user/reset/%/%/%'] = array(
    'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alter_form_reset_password_user_pass_reset', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    
  );

    
  
  //$items['user/reset/%/%/%']['title'] = t('Updating Data');
}

function alter_form_reset_password_user_pass_reset ($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
   global $user;
   $type = $_GET["type"]; 
  

    // When processing the one-time login link, we have to make sure that a user
    // isn't already logged in.
    if ($user->uid) {
      // The existing user is already logged in.
      if ($user->uid == $uid) {
        drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
      }
      // A different user is already logged in on the computer.
      else {
        $reset_link_account = user_load($uid);
        if (!empty($reset_link_account)) {
          drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
            array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
        } else {
          // Invalid one-time link specifies an unknown user.
          drupal_set_message(t('The one-time login link you clicked is invalid.'));
        }
      }
      drupal_goto();
    }
    else {
      // Time out, in seconds, until login URL expires. Defaults to 24 hours =
      // 86400 seconds.
      $timeout = variable_get('user_password_reset_timeout', 86400);
      $current = REQUEST_TIME;
      // Some redundant checks for extra security ?
      $users = user_load_multiple(array($uid), array('status' => '1'));
      if ($timestamp <= $current && $account = reset($users)) {
        // No time out for first time login.
        if ($account->login && $current - $timestamp > $timeout) {
           if($type == "update" || $type == "register"){
             drupal_set_message(t('You have tried to use a one-time login link that has expired. if you have not updated your profile to get your password please request a new link at e-mail:').'<a href="mailto:portalcorporativo@caracoltv.com.co">portalcorporativo@caracoltv.com.co</a>');
              drupal_goto('user/logout');
          }else{
            drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
              drupal_goto('user/password');
          }
        }
        elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
          // First stage is a confirmation form, then login
          if ($action == 'login') {
            // Set the new user.
            $user = $account;
            // user_login_finalize() also updates the login timestamp of the
            // user, which invalidates further use of the one-time login link.
            if(!isset($type)){
              user_login_finalize();        
              
            
              watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
              drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
              // Let the user's password be changed without the current password check.
            }else{
              $timestamp = $user->login;
              user_login_finalize();
              $user->login = $timestamp;
              user_save($user);
            
              watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
              drupal_set_message(t('Please update your info.'));

            }
            $token = drupal_random_key();
            $_SESSION['pass_reset_' . $user->uid] = $token;
            drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
          }
          else {
            if(!isset($type)){
              $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
              $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
              $form['actions'] = array('#type' => 'actions');
              $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
              $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
            }else{
              if($type == "update"){
                drupal_set_title(t('Updating Data'));
                $form['message'] = array('#markup' => t('<p>This is a login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and update your data.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
                $form['actions'] = array('#type' => 'actions');
                $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
                $url = url("user/reset/$uid/$timestamp/$hashed_pass/login", array(
                  'query' => array(        
                    'destination' => "user/$uid/edit/periodista?type=update",
                    'type' => "update"
                  )
                ));
                $form['#action'] = $url;
              }

            if($type == "register"){
                drupal_set_title(t('Register Data'));
                $form['message'] = array('#markup' => t('<p>This is a login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and complete your profile.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
                $form['actions'] = array('#type' => 'actions');
                $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
                $url = url("user/reset/$uid/$timestamp/$hashed_pass/login", array(
                  'query' => array(        
                    'destination' => "user/$uid/edit/periodista?type=register",
                    'type' => "register"

                  )
                ));

              $form['#action'] = $url;


            }
          }
            return $form;
          }
        }
        else {
           if($type == "update" || $type == "register"){
              drupal_set_message(t('You have tried to use a one-time login link that has expired. if you have not updated your profile to get your password please request a new link at e-mail:').' <a href="mailto:portalcorporativo@caracoltv.com.co">portalcorporativo@caracoltv.com.co</a>');
              drupal_goto('user/logout');
          }else{
            drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
            drupal_goto('user/password');
          }
        }

      }
      else {
        // Deny access, no more clues.
        // Everything will be in the watchdog's URL for the administrator to check.
        drupal_access_denied();
        drupal_exit();
      }
    }

}
 /**
 * Implementation of hook_form_FORM_ID_alter()
 */
function alter_form_reset_password_form_user_pass_reset_alter(&$form, &$form_state, $form_id) {
  $uid = $form_state['build_info']['args'][0];
  $timestamp = $form_state['build_info']['args'][1];
  $hashed_pass = $form_state['build_info']['args'][2];
  $type = $_GET["type"];    
 
  //$form['message'] = array('#markup' => t("%expiration_date"));
  if($type == "update"){
    drupal_set_title(t('Updating Data'));
    $url = url("user/reset/$uid/$timestamp/$hashed_pass/login", array(
      'query' => array(
       
        'type' => "update"
      )
    ));
    $form['#action'] = $url;
  }

  if($type == "register"){
    drupal_set_title(t('Register Data'));
    $url = url("user/reset/$uid/$timestamp/$hashed_pass/login", array(
      'query' => array(
        
        'type' => "register"

      )
    ));
    $form['#action'] = $url;
  }

 

}

function alter_form_reset_password_form_alter (&$form, &$form_state, $form_id){
  switch ($form_id) {
      case 'webform-client-form-1083':
      $form['#action'] = url(drupal_get_path_alias($_GET["q"]));
  }
}