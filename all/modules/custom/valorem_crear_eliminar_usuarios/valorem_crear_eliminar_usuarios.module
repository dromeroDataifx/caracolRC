<?php

require './includes/password.inc';

function valorem_crear_eliminar_usuarios_init() {

    global $user;

    if ($user->uid > 1 && arg(0) == 'user' && is_numeric(arg(1))) {
        drupal_goto('live_streaming');
    }

    //$usuario = user_load(186117);

    if ($user->uid == 1) {
        //var_dump($usuario);
    }
}

/**
 * Implementation of hook_menu().
 */
function valorem_crear_eliminar_usuarios_menu() {
    $items = array();

    $items['admin/config/user-interface/usuarios'] = array(
        'title' => t('Importar Usuarios'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('valorem_crear_eliminar_usuarios_import'),
        'access callback' => TRUE,
        'weight' => 12,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['ajax/users'] = array(
        'title' => t('Buscar usuarios'),
        'page callback' => 'ajax_users',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

function ajax_users() {

    $busqueda = $_GET['query'];

    $condiciones = array();
    $terminos = explode(' ', $busqueda);
    foreach ($terminos as $termino) {
        $condiciones[] = ' a.full_name like \'%' . $termino . '%\' ';
    }
    $condicion = implode('AND', $condiciones);

    $query = db_query('SELECT a.full_name as nombre 
		FROM usuarios_accionistas a
		WHERE ' . $condicion . ' 
		LIMIT 0,10');

    $nombres = array();
    foreach ($query as $usuario) {
        $nombres[] = "'" . $usuario->nombre . "'";
    }
    $nombres = implode(',', $nombres);

    print "{
		 query:'" . $busqueda . "',
		 suggestions:[" . $nombres . "]
	}";

    exit();
}

/**
 * Generates the file import form.
 */
function valorem_crear_eliminar_usuarios_import() {
    $form = array('#attributes' => array('enctype' => 'multipart/form-data'));
    $form['source'] = array(
        '#type' => 'fieldset',
        '#title' => t('Importar Usuarios')
    );
    $form['source']['upload'] = array(
        '#type' => 'file',
        '#title' => t('Archivo csv'),
    );
    if ($max_size = _valorem_crear_eliminar_usuarios_parse_size(ini_get('upload_max_filesize'))) {
        $form['source']['upload']['#description'] = t('Due to server restrictions, the maximum upload file size is !size. Files that exceed this size will be disregarded without notice.', array('!size' => format_size($max_size)));
    }
    $form['source']['delimiter'] = array(
        '#type' => 'select',
        '#title' => t('Delimitador'),
        '#options' => array(
            '#comma' => t('Comma – default')
        ),
    );
    $form['source']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Importar Usuarios')
    );
    //** Borrar Lista de Usuarios  **//
    $query = db_query('SELECT uid, field_user_temp_value FROM field_data_field_user_temp, users WHERE uid = entity_id AND field_user_temp_value = 1');

    if ($query->fetchAssoc() != NULL) {
        $i = 1;
        foreach ($query as $key => $value) {
            $i++;
        }
        $form['source2'] = array(
            '#type' => 'fieldset',
            '#title' => t('Existen ' . $i . ' Usuarios Temporeales')
        );
        $form['source2']['submit2'] = array(
            '#type' => 'submit',
            '#value' => t('Eliminar Usuarios Temporales')
        );
    }
    return $form;
}

/* function valorem_crear_eliminar_usuarios_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'valorem_crear_eliminar_usuarios_import') {
  dpm($form);
  }
  } */

/**
 * Parses PHP configuration size values into bytes.
 *
 * Edited from an example at http://php.net/manual/en/function.ini-get.php
 */
function _valorem_crear_eliminar_usuarios_parse_size($value) {
    $value = trim($value);
    $number = (int) drupal_substr($value, 0, -1);
    $suffix = drupal_strtoupper(drupal_substr($value, -1));
    switch ($suffix) {
        case 'G':
            $number *= 1024;
        case 'M':
            $number *= 1024;
        case 'K':
            $number *= 1024;
    }
    return $number;
}

function valorem_crear_eliminar_usuarios_cargar_js_and_css() {

    drupal_add_js(drupal_get_path('module', 'valorem_crear_eliminar_usuarios') . '/js/jquery.autocomplete-min.js');
    drupal_add_css(drupal_get_path('module', 'valorem_crear_eliminar_usuarios') . '/css/styles.css');
}

/**
 * Handles file import form validation.
 */
function valorem_crear_eliminar_usuarios_import_validate($form, &$form_state) {

    if (isset($form_state['input']['op']) && $form_state['input']['op'] != 'Eliminar Usuarios Temporales') {
        $form_state['upload_file'] = file_save_upload('upload', array('file_validate_extensions' => array(0 => 'csv')));
        if (!$form_state['upload_file']) {
            form_set_error('upload', t('Please upload a file.'));
        } else {
            $form_state['upload_file']->filepath = drupal_realpath($form_state['upload_file']->uri);
        }
    }
}

/**
 * Handles file import form submission.
 */
function valorem_crear_eliminar_usuarios_import_submit($form, &$form_state) {
    if (isset($form_state['input']['op']) && $form_state['input']['op'] != 'Eliminar Usuarios Temporales') {
        valorem_crear_eliminar_usuarios_import_batch($form, $form_state);
    } else {
        valorem_crear_eliminar_usuarios_eliminar_usuarios_temporales();
    }
}

/**
 * Batch operation.
 * Used for validation and saving
 */
function valorem_crear_eliminar_usuarios_import_batch($form, &$form_state) {
    $file = $form_state['upload_file'];
    $options = $form_state['values'];
    if ($options['delimiter'] == "semicolon") {
        $delimiter = ';';
    } else {
        $delimiter = ',';
    }

    /*
     * Desactivamos notificaciones por correo… todas las notificaciones, este no es un portal donde los
     * usuarios tengan privilegios
     */
    $notificaciones = array('register_admin_created', 'register_no_approval_required', 'register_pending_approval',
        'password_reset', 'status_activated', 'status_blocked', 'cancel_confirm', 'status_canceled');
    foreach ($notificaciones as $op) {
        variable_set('user_mail_' . $op . '_notify', false);
    }

    // Automatically detect line endings.
    ini_set('auto_detect_line_endings', '1');
    $handle = fopen($file->filepath, 'r');
    $first = TRUE;
    $i = 10000; // i arranca en 10000 para ser colocado al final de los nombres de usuario y completarlos si son muy cortos
    $operations = array();

    db_truncate('usuarios_accionistas')->execute();


    $current_count = 0;
    $current_operations = array();
    while ($line = fgetcsv($handle, 4096, $delimiter)) {
        if (empty($line) || (count($line) == 1 && $line[0] == NULL))
            continue;
        // Skip UTF-8 byte order mark.
        if ($first) {
            if (strncmp($line[0], "\xEF\xBB\xBF", 3) === 0) {
                $line[0] = drupal_substr($line[0], 3);
            }
            $first = FALSE;
        } else {
            // Convert line to UTF-8.
            $line = array_map('_valorem_crear_eliminar_usuarios_import_line_to_utf8', $line);

            $current_count++;

            $current_operations[] = $line;

            if ($current_count >= 200) {

                $operations[] = array('_valorem_crear_eliminar_usuarios_batch', array($current_operations, $i));
                $i++;

                $current_operations = array();
                $current_count = 0;
            }
        }
    }

    if ($current_count > 0) {

        $operations[] = array('_valorem_crear_eliminar_usuarios_batch', array($current_operations, $i));

        $current_operations = array();
        $current_count = 0;
    }

    $batch = array(
        'operations' => $operations,
        'finished' => '_valorem_crear_eliminar_usuarios_finished',
    );
    batch_set($batch);
    fclose($handle);
}

function _valorem_crear_eliminar_usuarios_batch($operations, $i, &$context) {

    $datos_usuarios = array();
    foreach ($operations as $line) {
        $datos_usuario = explode(';', $line[0]);

        if (count($datos_usuario) == 5) {
            $datos_usuario[3] = limpiar_caracteres_especiales(trim($datos_usuario[3]));
            $datos_usuario[3] = str_replace("\xC2\x84", '', $datos_usuario[3]);

            $datos_usuarios[] = "('$datos_usuario[0]','$datos_usuario[1]','$datos_usuario[2]','$datos_usuario[3]','$datos_usuario[4]','$datos_usuario[0]')";
        } else {
            watchdog('valorem_crear_eliminar_usuarios', $datos_usuario[0]);
        }
    }

    $values = implode(',', $datos_usuarios);

    $sql = 'INSERT INTO usuarios_accionistas (deceval,tipodoc,document,full_name,sharecount,username) VALUES ' . $values;
    db_query($sql);
}

function iniciales($nombre) {
    $nombre = strtolower($nombre);
    $nombre = limpiar_caracteres_especiales($nombre);
    $nombre = str_replace(array('.', ',', ';', '-', '*'), '', $nombre);
    return $nombre;
}

function limpiar_caracteres_especiales($s) {
    $s = str_replace(array('á', 'à', 'â', 'ã', 'ª'), "a", $s);
    $s = str_replace(array('Á', 'À', 'Â', 'Ã'), 'A', $s);
    $s = str_replace(array('é', 'è', 'ê'), 'e', $s);
    $s = str_replace(array('É', 'È', 'Ê'), 'E', $s);
    $s = str_replace(array('í', 'ì', 'î'), 'i', $s);
    $s = str_replace(array('Í', 'Ì', 'Î'), 'I', $s);
    $s = str_replace(array('ó', 'ò', 'ô', 'õ', 'º'), 'o', $s);
    $s = str_replace(array('Ó', 'Ò', 'Ô', 'Õ'), 'O', $s);
    $s = str_replace(array('ú', 'ù', 'û'), 'u', $s);
    $s = str_replace(array('Ú', 'Ù', 'Û'), 'U', $s);
    $s = str_replace(array('ñ'), 'n', $s);
    $s = str_replace('Ñ', 'N', $s);
    $s = str_replace(array('"'), '', $s);
    $s = str_replace(array("'"), '', $s);
    //para ampliar los caracteres a reemplazar agregar lineas de este tipo:
    //$s = str_replace("caracter-que-queremos-cambiar","caracter-por-el-cual-lo-vamos-a-cambiar",$s);
    //$textoLimpio = preg_replace('([^A-Za-z0-9])', '', $texto);
    return $s;
}

/**
 * Helper function to convert each line item to UTF-8.
 */
function _valorem_crear_eliminar_usuarios_import_line_to_utf8($value) {
    $enc = mb_detect_encoding($value, "UTF-8, ISO-8859-1, ISO-8859-15", TRUE);
    if ($enc != "UTF-8") {
        $value = drupal_convert_to_utf8($value, $enc);
    }
    return $value;
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function _valorem_crear_eliminar_usuarios_finished($success, $results, $operations) {
    if ($success) {
        drupal_set_message(t('Usuarios Creados correcamente', array('%final' => end($results))));
    } else {
        $error_operation = reset($operations);
        drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
    }
}

/**
 * Batch para eliminar usuarios
 * */
function valorem_crear_eliminar_usuarios_eliminar_usuarios_temporales() {
    $query = db_query('SELECT c.uid, b.field_user_temp_value, a.field_name_compete_value FROM field_data_field_name_compete a, field_data_field_user_temp b, users c WHERE c.uid = b.entity_id AND c.uid = a.entity_id AND b.field_user_temp_value = 1');
    $operations = array();
    foreach ($query as $key => $value) {
        $operations[] = array(
            '_valorem_crear_eliminar_usuarios_temporales_batch', array($value->uid, $value->field_name_compete_value)
        );
        //_valorem_crear_eliminar_usuarios_temporales_batch($value->uid);
    }
    $batch = array(
        'operations' => $operations,
        'finished' => '_valorem_crear_eliminar_usuarios_temporales_finished',
    );
    batch_set($batch);
}

function _valorem_crear_eliminar_usuarios_temporales_batch($uid, $name, &$context) {
    $context['message'] = t('PUC ', array('@title' => '')) . ' ' . $name . ' - ' . $uid;
    user_delete($uid);
}

function _valorem_crear_eliminar_usuarios_temporales_finished($success, $results, $operations) {
    if ($success) {
        drupal_set_message(t('Usuarios temporales eliminados correcamente', array('%final' => end($results))));
    } else {
        $error_operation = reset($operations);
        drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
    }
}

/**
 * Implements hook_user_login
 * */
function valorem_crear_eliminar_usuarios_form_alter(&$form_state, &$form, $form_id) {
    if ($form_id == 'user_login') {

        valorem_crear_eliminar_usuarios_cargar_js_and_css();

        $form_state['pass']['#required'] = true;
        //$form_state['#validate'][] = 'user_login_final_deceval_validate';

        $otro = array();
        $otro[0] = 'user_login_final_deceval_validate';
        $form_state['#validate'] = array_merge($otro, array()); // $form_state['#validate']);


        /*
         * Campo autocomplete
         */
        drupal_add_js(drupal_get_path('module', 'valorem_crear_eliminar_usuarios') . '/js/acceso_asamblea.js');

        $form_state["contact_information"]["#markup"] = "";

        $form_state["contact_information"]["#markup"] .= '<div class="columna column1 imagen valorem"></div>';
        $form_state["contact_information"]["#markup"] .= '<div class="columna column2">';
        $form_state["contact_information"]["#markup"] .= "<h4>" . t('SEÑOR ACCIONISTA') . ":</h4>";
        $form_state["contact_information"]["#markup"] .= "<p>" . t('Para acceder al live streaming de la Asamblea, por favor diligencie el siguiente formulario.') . "</p>";
        $form_state["contact_information"]["#markup"] .= "<p>" . t('Si usted ingresa a nombre de una empresa, por favor digite el NIT correspondiente en el campo Nombre completo/NIT. Los campos marcados con (<strong>*</strong>) son obligatorios.') . "</p>";
        $form_state["contact_information"]["#markup"] .= "<p>" . t('Si usted tiene dudas con respecto al número de acciones de Valorem en su portafolio, por favor comun&iacute;quese con su Corredor de Bolsa.') . "</p>";
        $form_state["contact_information"]["#markup"] .= '</div><!-- Cierra columna2 -->';
        $form_state["contact_information"]["#markup"] .= '<div class="columna column3 imagen livestream"></div>';

        $form_state["contact_information"]["#markup"] = '<div class="texto-login block-inner"><h2 class="block-title">' . t('ASAMBLEA GENERAL DE ACCIONISTAS') . '</h2><div class="content">' . $form_state["contact_information"]["#markup"] . '';
        //En esta ultima linea evitamos cerrar el div de texto login y content a proposito para cerrarlos al final del submit		
        $form_state['actions']["submit"]["#suffix"] = '</div></div>';



        /*
         * Campos para guardar en la base de datos
         */


        $form_state["documento"] = array(
            "#type" => "textfield",
            "#title" => t("Cédula o Nit"),
            "#size" => 20,
            "#maxlength" => 20,
            "#required" => true,
        );
//
//        $form_state["telefono"] =
//                array(
//                    "#type" => "textfield",
//                    "#title" => t("Número telefónico"),
//                    "#size" => 20,
//                    "#maxlength" => 20,
//                    "#required" => true,
//        );
//
//        $form_state["correo"] =
//                array(
//                    "#type" => "textfield",
//                    "#title" => t("Correo electrónico"),
//                    "#size" => 30,
//                    "#maxlength" => 30,
//                    "#required" => false
//        );

        $form_state['deceval'] = array(
            '#title' => t('Cuenta Deceval'),
            '#type' => 'textfield',
            '#required' => true,
            "#size" => 30,
            "#maxlength" => 30,
            '#default_value' => ''
        );

        $form_state["name"]["#title"] = t($form_state["name"]["#title"]);
        $form_state["pass"]["#title"] = t($form_state["pass"]["#title"]);
        $form_state["name"]["#description"] = t('NIT en caso de ser empresa');
        $form_state["pass"]["#description"] = t('hasta el 28 de Marzo del 2012');

        /* Reorganizamos columnas */
        $form_state["name"]["#weight"] = "3";
//        $form_state["telefono"]["#weight"] = "6";
        $form_state["pass"]["#weight"] = "9";
//        $form_state["correo"]["#weight"] = "12";
        $form_state["documento"]["#weight"] = "15";

        $form_state["#redirect"] = 'live_streaming';
    }
}

function user_login_final_deceval_validate(&$form, &$form_state) {

    $name = trim($form_state['values']['name']);
    $validation = FALSE;

    $condicion = " (
             (a.full_name like '%" . $form_state['values']['name'] . "%' AND tipodoc = 'CC' )
                OR  
             (a.document = '" . $form_state['values']['name'] . "'       AND tipodoc = 'NIT' )
            ) AND a.sharecount='" . $form_state['values']['pass'] . "' AND a.deceval='" . $form_state['values']['deceval'] . "'";
$sql='SELECT a.full_name,a.username,a.sharecount,a.deceval,a.document FROM usuarios_accionistas a WHERE ' . $condicion;
    $query = db_query($sql);
//    print ($sql);exit;;
    if (isset($_GET['debug']) && $_GET['debug'] == 'on') {
//        drupal_set_message('hola', 'warning');
        $sql = str_replace(array_keys($query->getArguments()), array_values($query->getArguments()), $query->__toString());
//        drupal_set_message(kpr($sql, true), 'warning');
    }
    $usuarios = array();
    $nombres = array();
    foreach ($query as $usuario) {
        $nombres[] = "'" . $usuario->nombre . "'";
        $usuarios[] = array(
            'full_name' => $usuario->full_name,
            'username' => $usuario->username,
            'sharecount' => $usuario->sharecount,
            'deceval' => $usuario->deceval,
            'document' => $usuario->document
        );
    }

    if (count($usuarios) == 0) {

        $password = trim($form_state['values']['pass']);
        $form_state['uid'] = user_authenticate($name, $password);
        if ($form_state['uid'] == NULL) {
            form_set_error('pass', t('Lo sentimos. No reconocemos el nombre de usuario o la contraseña'));
        }
    } else {

        user_external_login_register($usuarios[0]['username'], 'valorem_crear_eliminar_usuarios');
        $account = user_external_load($usuarios[0]['username']);
        $form_state['uid'] = $account->uid;


        //$form_state['values']['deceval'];
        //$form_state['values']['pass'];
        //$form_state['values']['name'];
    }

    /*

      if($i==0 && $form_state['values']['name']=='admin') {
      $usuarios[] = array(
      'uid' => 1,
      'name' => 'admin'
      );
      }

      if ($i < 2) {
      // Obligar contraseña de Usuario Administrador, Super Admin y traductor
      if ( ISSET($usuarios[0]) && ( $usuarios[0]['uid'] == 1|| $usuarios[0]['uid'] == 142 || $usuarios[0]['uid'] == 262) ) {

      } else {
      if( ISSET($usuarios[0]) && coindiceCuentaDeceval($usuarios[0]['uid'],$form_state['values']['deceval']) ) {
      $form_state['values']['name'] = $usuarios[0]['name'];
      $form_state['values']['pass'] = 'valorem' . $form_state['values']['pass'];
      $form_state['uid'] = user_authenticate($usuarios[0]['name'], $form_state['values']['pass']);

      if($form_state['uid']) {
      completarDatos_usuarioValorem( $form_state['values'] );
      //drupal_goto("user");
      }
      }
      }
      } else {
      $password = $form_state['values']['pass'];
      $i = 0;
      foreach ($usuarios as $key => $value) {
      if(coindiceCuentaDeceval($value['uid'],$form_state['values']['deceval'])) {
      $form_state['values']['name'] = $value['name'];
      $form_state['values']['pass'] = 'valorem' . $password;
      $form_state['uid'] = user_authenticate($form_state['values']['name'], $form_state['values']['pass']);
      if(!is_null($form_state['uid']) && $form_state['uid'] != FALSE) {
      completarDatos_usuarioValorem( $form_state['values'] );
      //drupal_goto("user");
      break;
      }
      }
      }
      } */
}

function coindiceCuentaDeceval($uid, $cuenta) {

    $account = user_load($uid);
    if ($account->field_cuenta_deceval['und'][0]['value'] == $cuenta) {
        return true;
    } else {
        form_set_error('deceval', t('Lo sentimos. No reconocemos el nombre de usuario, la contraseña o la cuenta Deceval'));
        return false;
    }
}

function completarDatos_usuarioValorem($values) {



    db_insert('usuarios_valorem')
            ->fields(array(
                'nombre' => $values['name'],
                'pass' => str_replace('valorem', '', $values['pass']),
                'documento' => $values['documento'],
                'telefono' => $values['telefono'],
                'mail' => $values['correo'],
            ))
            ->execute();
}
