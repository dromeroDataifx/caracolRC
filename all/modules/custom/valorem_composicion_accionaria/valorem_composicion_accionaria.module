<?php

/**
 * Implementation of hook_menu().
 */
function valorem_composicion_accionaria_menu() {
  $items = array();
  
  $items['admin/config/user-interface/composicion_accionaria'] = array(
    'title' => t('Composicion Accionaria'),
    //'file' => 'valorem_upload_file.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valorem_composicion_accionaria_import'),
    'access callback' => TRUE,
    'weight' => 12,
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/**
 * Generates the txt import form.
 */
function valorem_composicion_accionaria_import() {
  $form = array(
    '#attributes' => array(
      'enctype' => 'multipart/form-data'
    )
  );

  $form['source'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Source')
  );
  $form['source']['upload'] = array(
    '#type' => 'file',
    '#title' => t('Seleccione el Formato CSV'),
    '#description' => t('Formato con informacion de la composicion accionaria de la empresa en formato csv para almacenar en el sistema') 
  );
  $form['source']['upload2'] = array(
    '#type' => 'file',
    '#title' => t('Seleccione formato original xlsx'),
    '#description' => t('Formato con informacion de la composicion accionaria de la empresa en formato xlsx para descarga de usuario')
  );

  if ($max_size = _valorem_composicion_accionaria_parse_size(ini_get('upload_max_filesize'))) {
    $form['source']['upload']['#description'] = t('Due to server restrictions, the maximum upload file size is !size. Files that exceed this size will be disregarded without notice.', array('!size' => format_size($max_size)));
    $form['source']['upload2']['#description'] = t('Due to server restrictions, the maximum upload file size is !size. Files that exceed this size will be disregarded without notice.', array('!size' => format_size($max_size)));
  }

  $form['source']['delimiter'] = array(
    '#type' => 'select',
    '#title' => t('TXT file delimiter'),
    '#default_value' => 'Comma – default',
    '#options' => array(
      '#comma' => t('Comma – default'),
    ),
    '#description' => t('Choose the delimiter used in the txt file you want to import.'),
  );

  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Update')
  );
  return $form;
}

/**
 * Parses PHP configuration size values into bytes.
 * Edited from an example at http://php.net/manual/en/function.ini-get.php
 */
function _valorem_composicion_accionaria_parse_size($value) {
  $value = trim($value);
  $number = (int)drupal_substr($value, 0, -1);

  $suffix = drupal_strtoupper(drupal_substr($value, -1));
  switch ($suffix) {
    case 'G':
      $number *= 1024;
    case 'M':
      $number *= 1024;
    case 'K':
      $number *= 1024;
  }

  return $number;
}

/**
 * Handles txt import form validation.
 */
function valorem_composicion_accionaria_import_validate($form, &$form_state) {
  $form_state['upload_file'] = file_save_upload('upload', array('file_validate_extensions' => array(0 => 'csv')));
  //file_prepare_directory('public://test/', FILE_CREATE_DIRECTORY);
  $file = file_save_upload('upload2', array('file_validate_extensions' => array(0 => 'xlsx')), 'public://test/', FILE_EXISTS_REPLACE);
	$file->status = 1;
	$file->filemime = 'composicion_accionaria/xlsx';
	$form_state['upload_file2'] = $file;
  if (!$form_state['upload_file']) {
    form_set_error('upload', t('Please upload a file.'));
  } else {
    $form_state['upload_file']->filepath = drupal_realpath($form_state['upload_file']->uri);
		$updated = db_update('file_managed') // Table name no longer needs {}
  		->fields(array(
    		'status' => 1,
    		'filemime' => $form_state['upload_file2']->filemime,
  	))
  	->condition('fid', $form_state['upload_file2']->fid, '=')
  	->execute();
  }
}

/**
 * Handles txt import form submission.
 */
function valorem_composicion_accionaria_import_submit($form, &$form_state) {
  //valorem_composicion_accionaria_import_batch($form, $form_state);
}//Descomentar


/**
 * Batch operation.
 * Used for validation and saving
 */
function valorem_composicion_accionaria_import_batch($form, &$form_state) {
  $file = $form_state['upload_file'];
  $options = $form_state['values'];
  if ($options['delimiter'] == "semicolon") {
    $delimiter = ';';
  }
  else {
    $delimiter = ',';
  }
  // Automatically detect line endings.
  global $handle;
  ini_set('auto_detect_line_endings', '1');
  $handle = fopen($file->filepath, 'r');
  // ciclo recorre cada linea del archivo

  $operations = array();
  $i = 1;
  $datos = array();
  $j = '';

  while ($line = fgetcsv($handle, 4096, $delimiter)) {
		$j = $handle;
    if (empty($line) || (count($line) == 1 && $line[0] == NULL)) {
      continue;
    }
    else {
    	//if ($i <= 2000) {
    		$line = array_map('_valorem_composicion_accionaria_import_line_to_utf8', $line);
    		$operations[] = array(
      	  '_valorem_composicion_accionaria_batch', 
          array($line));	
    	//}
      $i++;
    }
  }
  //dpm($operations);
  $batch = array(
    'operations' => $operations,
    'finished' => '_valorem_composicion_accionaria_finished',
  );
  batch_set($batch);
  fclose($handle);
}

function _valorem_composicion_accionaria_batch($line, &$context) {

  $context['message'] = t('Cuenta: ', array('@title' => '')) . ' '.$line[2];

  if (is_numeric($line[1])) {
    $context['message'] = t('Cuenta: ', array('@title' => '')) . ' ' . $line[2] . ' - ' . $line[5]; 
    $cuenta = db_select('valorem_accionistas', 'n')
    ->fields('n')
    ->condition('acc_cuenta', trim($line[2]),'=')
    ->execute()
    ->fetchAssoc();
    
    if ($cuenta == NULL) {
      db_insert('valorem_accionistas') // Table name no longer needs {}
        ->fields(
          array(
            'acc_cuenta' => trim($line[2]),
            'acc_tipo_documento' => trim($line[3]),
            'acc_identificacion' => trim($line[4]),
            'acc_accionista' => $line[5]
          )
        )
      ->execute();
      db_insert('valorem_participacion') 
        ->fields(
          array(
            'par_cuenta' => trim($line[2]),
            'par_saldo' => trim($line[6]),
            'par_porcentaje' => substr($line[7], 0, -1)
          )
        )
      ->execute();
    }
    else {
      db_update('valorem_participacion') 
      ->fields(
        array(
          'par_saldo' => trim($line[6]),
          'par_porcentaje' => substr($line[7], 0, -1)
        )
      )
      ->condition('par_cuenta', trim($line[2]))
      ->execute();
    }
  }
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function _valorem_composicion_accionaria_finished($success, $results, $operations) {
    if ($success) {
    drupal_set_message(t('Termino correcamente', array('%final' => end($results))));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}
/**
 * Helper function to convert each line item to UTF-8.
 */
function _valorem_composicion_accionaria_import_line_to_utf8($value) {
  $enc = mb_detect_encoding($value, "UTF-8, ISO-8859-1, ISO-8859-15", TRUE);
  if ($enc != "UTF-8") {
    $value = drupal_convert_to_utf8($value, $enc);
  }
  return $value;
}